# -*- coding: utf-8 -*-
"""Earth_03_Farhan Yehanda.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qHiBIjHq8ayAb-2tS65A82KHMBR2GBJK
"""

import pandas as pd
pd.set_option('display.max_columns', None)

data = pd.read_csv('https://raw.githubusercontent.com/Rietaros/kampus_merdeka/main/HRDataset_v14.csv')
data.head()

"""# Pandas Question

1. What is the minimum, median, max, and average salary for employee by Married Description and Gender.
Hints: use agg function<br>
Expected Output as below<br>
(5 Points)
"""

# 1. What is the minimum, median, max, and average salary for employee by Married Description and Gender
# Hints: use agg function
# Expected Output as below
# (5 Points)
import pandas as pd
data = pd.read_csv('https://raw.githubusercontent.com/Rietaros/kampus_merdeka/main/HRDataset_v14.csv')
hasil = data.groupby(['MaritalDesc', 'Sex'])['Salary'].agg(['min', 'median', 'max', 'mean'])
hasil = hasil.rename(columns={'min': 'Minimum Salary', 'median': 'Median Salary', 'max': 'Maximum Salary', 'mean': 'Average Salary'})
print(hasil)

"""2. What is top-5 reason of termination?<br>
Expected Output as below<br>
(5 Points)
"""

#code here
import pandas as pd
data = pd.read_csv('https://raw.githubusercontent.com/Rietaros/kampus_merdeka/main/HRDataset_v14.csv')
termination = data["TermReason"].value_counts()
top_termination = termination.head(5)
print(top_termination)

"""3. What is the highest number of employee by Recruitment Source that 'Exceeds' the Performance Score?
Hints: Use filter for Performance Score first. Don't forget to sort_values.<br>
Expected Output as below<br>
(5 Points)
"""

#code here
import pandas as pd
data = pd.read_csv('https://raw.githubusercontent.com/Rietaros/kampus_merdeka/main/HRDataset_v14.csv')
exceeds_data = data[data['PerformanceScore'] == 'Exceeds']
recruitment_counts = exceeds_data['RecruitmentSource'].value_counts()
sorted_counts = recruitment_counts.sort_values(ascending=False)
highest_count = sorted_counts.iloc[0]
highest_source = sorted_counts.index[0]
print(recruitment_counts)

"""4. How many managers in each department?
Hints: use nunique() as aggregation function.<br>
Expected Output as below.<br>
(5 Points)
"""

#code here
import pandas as pd
data = pd.read_csv('https://raw.githubusercontent.com/Rietaros/kampus_merdeka/main/HRDataset_v14.csv')
manager = data.groupby('Department')['ManagerName'].nunique()
print(manager)

"""5. What is Termination Ratio by Gender?.
Hints: use value_counts(normalize=True).<br>
Expected Output as below.<br>
(5 Points)
"""

#code here
import pandas as pd
data = pd.read_csv('https://raw.githubusercontent.com/Rietaros/kampus_merdeka/main/HRDataset_v14.csv')
termination_ratio_by_gender = data[data['EmploymentStatus'] == 'Voluntarily Terminated']['Sex'].value_counts(normalize=True)
print(termination_ratio_by_gender)

"""# Create an EDA and Data Visualization Question"""

#Sample Visualization, the example is not counted for the final score :p
#Create 5 visualization for better understanding on data
from matplotlib import pyplot as plt
import seaborn as sns
import numpy as np

#Ratio termination by Gender

#Step1, get the data

term = data.groupby(by=['Sex'])\
                        .agg(total_termination=('Termd','sum')).reset_index()\

#Step2, Plot it
f, ax = plt.subplots(1, 1, figsize=(12, 8))
ax = sns.barplot(x='Sex', y='total_termination', hue='Sex', data=term, palette='cool')

"""6. Buatlah Scatter plot antara kolom "Salary" dengan "EngagementSurvey", beri warna berbeda sesuai dengan status di "Termd"<br>
(5 points)<br>
*bentuk output di bawah hanya contoh*
"""

#code here
import matplotlib.pyplot as plt
import seaborn as sns

# Scatter plot of Salary vs. EngagementSurvey with different colors for Termd status
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Salary', y='EngagementSurvey', hue='Termd', data=data, palette='coolwarm')
plt.xlabel('Salary')
plt.ylabel('Engagement Survey')
plt.title('Salary vs. Engagement Survey (Colored by Termd Status)')
plt.legend(title='Termd', labels=['Not Terminated', 'Terminated'])
plt.show()

"""7. Buatlah visualisasi barchart untuk menghitung jumlah "termination of an employee's" berdasarkan department.<br>
(5 points)<br>
*bentuk output di bawah hanya contoh*
"""

import matplotlib.pyplot as plt
import seaborn as sns

termination_counts = data[data['EmploymentStatus'] == 'Voluntarily Terminated']['Department'].value_counts()
plt.figure(figsize=(12, 8))
sns.barplot(x=termination_counts.index, y=termination_counts.values, palette='Set2')
plt.xlabel('Department')
plt.ylabel('Termination Count')
plt.title('Jumlah Terminasi Karyawan Berdasarkan Departemen')
plt.xticks(rotation=45)
plt.show()

"""8. Buatlah visualisasi Pie Chart untuk melihat persentasi jumlah karyawan yang "terminated" berdasarkan kolom "Position".<br>
(5 points)<br>
*bentuk output di bawah hanya contoh*
"""

import matplotlib.pyplot as plt
terminated_data = data[data['EmploymentStatus'] == 'Voluntarily Terminated']
termination_counts = terminated_data['Position'].value_counts()
plt.figure(figsize=(10, 10))
plt.pie(termination_counts, labels=termination_counts.index, autopct='%1.1f%%', startangle=140)
plt.title('Persentase Jumlah Karyawan yang "Terminated" Berdasarkan "Position"')
plt.axis('equal')
plt.show()

"""

```
# This is formatted as code
```

9. Buat Boxplot yang menggambarkan Salary berdasarkan Marital Desc, bedakan berdasarkan Termd
(5 points)"""

#code here
import seaborn as sns
import matplotlib.pyplot as plt
terminated_data = data[data['EmploymentStatus'] == 'Voluntarily Terminated']
active_data = data[data['EmploymentStatus'] == 'Active']

combined_data = pd.concat([terminated_data, active_data])

plt.figure(figsize=(12, 8))
sns.boxplot(x='MaritalDesc', y='Salary', hue='EmploymentStatus', data=combined_data, palette='Set2')
plt.xlabel('Marital Desc')
plt.ylabel('Salary')
plt.title('Salary berdasarkan Marital Desc (Dibedakan berdasarkan Termd)')
plt.xticks(rotation=45)
plt.show()

"""10. Tampilkan pairplot antara kolom 'Salary', 'EngagementSurvey', 'EmpSatisfaction','Absences'
beri kategori warna berdasarkan 'Termd'<br>
(5points)
"""

#codde here
print('Pairplot')
sns.pairplot(data=data[['Salary', 'EngagementSurvey', 'EmpSatisfaction','Absences', 'Termd']], hue='Termd', height=3, diag_kind="hist")
plt.show()

"""# Create Machine Learning Model to Predict Termd and Question"""

#11. Buat fitur baru (kolom baru) berupa "Age" dalam satuan tahun. Untuk mendapatkannya, ambil data pada kolom DOB dikurangi dengan 2022
#(5 points)
data['DOB'] = pd.to_datetime(data['DOB'])

data['Age'] = 2022 - data['DOB'].dt.year
print(data[['DOB', 'Age']])

#12. Lakukan MinMaxScaler dari fitur "Salary"
# (5 points)
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()

data['Salary_minmax'] = scaler.fit_transform(data[['Salary']])
print(data[['Salary', 'Salary_minmax']])

#13. Ubahlah semua tipe data object menjadi category
# 5 point
for column in data.select_dtypes(include=['object']).columns:
    data[column] = data[column].astype('category')
print(data.dtypes)

#Setelah diubah category

#14. Ubahlah "RecruitmentSource" dengan menggunakana Label Encoder
# 5 point



#15. Ubahlah "PerformanceScore" dengan menggunakana Label Encoder
# 5 point
import pandas as pd
from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()
data = pd.read_csv('https://raw.githubusercontent.com/Rietaros/kampus_merdeka/main/HRDataset_v14.csv')
data['PerformanceScore'] = label_encoder.fit_transform(data['PerformanceScore'])
data['RecruitmentSource'] = label_encoder.fit_transform(data['RecruitmentSource'])

print(data.dtypes)

#16. Pisahkan dependent variable dan independent variable
# 5 point
import pandas as pd
data = pd.read_csv('https://raw.githubusercontent.com/Rietaros/kampus_merdeka/main/HRDataset_v14.csv')

#Dependent Varible (target)
dependent_variable = pd.DataFrame(data['Termd'])

#Independent Variable (feature)
independent_variables = data.drop(columns=['Termd', 'Employee_Name'])

print("Dependent Variable (Target):")
print(dependent_variable)

print("\nIndependent Variables (Features):")
print(independent_variables)

#17. Bagi data menjadi Train-Test sebesar 80:20
# (5 points)
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_recall_curve, roc_curve, precision_score, recall_score

X_train, X_test, y_train, y_test = train_test_split(independent_variables, dependent_variable, test_size=0.2, random_state=42)

print("Data Train:", X_train.shape[0])
print("Data Test:", X_test.shape[0])

#18. Lakukan pemodelan machine learning (metode klasifikasi bebas) untuk bisa memprediksi status "Termd". Lakukan evaluasi hasil dengan menampilkan
# score klasifikasi, precision dan recall.
# Gunakan model yang menurut kalian terbaik
# (5 points)

"""# Insight (Answering the Question)

19.	Is there any relationship between who a person works for (their manager) and their performance score? (5 points)<br>
20.	What are our best recruiting sources if we want to ensure a low ratio of termination? (5 points)<br>
"""

